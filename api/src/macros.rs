macro_rules! config_file {
    ($class:ident ($file:literal) => $file_path:literal) => {
        #[derive(Deref, Clone, Template)]
        #[template(path = $file)]
        pub struct $class(pub crate::VagabondConfig);

        #[allow(dead_code)]
        impl $class {
            const CONFIG_NOTICE: &'static str =
                "This file is generated by Vagabond. Any changes may be overwritten!";

            pub const FILE_PATH: &'static str = $file_path;

            pub async fn write(config: crate::VagabondConfig) -> anyhow::Result<()> {
                Self::write_to(Self::FILE_PATH, config).await
            }

            pub async fn write_to<S: AsRef<std::ffi::OsStr> + ?Sized>(
                path: &S,
                config: crate::VagabondConfig,
            ) -> anyhow::Result<()> {
                use tokio::io::AsyncWriteExt;
                info!("Writing configuration to {}", Self::FILE_PATH);
                let config_contents = $class(config).to_string();
                let filepath = std::path::Path::new(path);
                let dirpath = filepath.parent().unwrap();
                std::fs::create_dir_all(dirpath)?;
                let mut f = tokio::fs::File::create(filepath).await?;
                f.write_all(config_contents.as_bytes()).await?;
                Ok(())
            }
        }
    };
}
